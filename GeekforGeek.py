# -*- coding: utf-8 -*-
"""Copy of Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qzUjLJZaG2JlzJvf7JegmBt4ktkkCy2r
"""

#1 import from git hub directly
!git clone https://github.com/ChitranjanUpadhayay/ML_Projects.git

#.2 import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#.3 import dataset from pd
data='/content/ML_Projects/Datasets/Fake News'
fake=pd.read_csv(data+'/Fake.csv')
true=pd.read_csv(data+'/True.csv')

#.4 check the fake data
fake.head()



#.5 true data
true.head()

#.6 create a column for ture and fake data
true['label']=1
fake['label']=0

#.7 now concate the true and fake table
data=pd.concat([true,fake],axis=0)
data.head()

data.tail()

#.8 also check the null values in the dataset
data.isnull().sum()

#.9 next we drop the columns
data.drop(['title','subject','date'],axis=1,inplace=True)

#10 next we reshaffle the data as so the true and fake are mixed
data=data.sample(frac=1)
data.head()

#11 reset the index
data.reset_index(inplace=True)
data.drop(['index'],axis=1,inplace=True)
data.head()
# so data collection and preprocessing is done

#12 now we will convert the text column in to the numerical values as ML work better on this (regular Expression)
import re

def wordopt(text):
  text=text.lower()
  # remove URLs
  text=re.sub(r'https?://\S+|www\.\S+','',text)
  # remove puntuctions
  text=re.sub(r'[^\w\s]','',text)
  # remove numbers
  text=re.sub(r'\d+','',text)
  # remove html tags
  text=re.sub('<.*?>','',text)
  text=re.sub(r'\n',' ',text)
  return text

# now apply it on text column to remove the punctutions,number,tags etc
data['text']=data['text'].apply(wordopt)
data['text']

# create dependant and independant variable
x=data['text']
y=data['label']
#

# independent variable
x

# dependent variable
y

# now next is train and test split
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train.shape

x_test.shape

# now we have to do the Feature Extraction (to convert text into numerical data by using TIF-IDF)
from sklearn.feature_extraction.text import TfidfVectorizer

# create a class
vectorization=TfidfVectorizer()
xy_train=vectorization.fit_transform(x_train)
xy_test=vectorization.transform(x_test)

xy_train

xy_test

# to create the ml model
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report # Import the missing function

LR=LogisticRegression()
LR.fit(xy_train,y_train)

# do prediction on test dataset
pred_lr=LR.predict(xy_test)

LR.score(xy_test,y_test)

print(classification_report(y_test,pred_lr))

#_________________________ For Decision Tree _______
from sklearn.tree import DecisionTreeClassifier

DT=DecisionTreeClassifier()
DT.fit(xy_train,y_train)

pred_dtc=DT.predict(xy_test)

DT.score(xy_test,y_test)

print(classification_report(y_test,pred_dtc))

# ___________________ Random Classifier ______
from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier()
rfc.fit(xy_train,y_train)

pred_rfc=rfc.predict(xy_test)

rfc.score(xy_test,y_test)

print(classification_report(y_test,pred_rfc))

# ________________ gradianbooster classifier ______
from sklearn.ensemble import GradientBoostingClassifier

gbc=GradientBoostingClassifier()
gbc.fit(xy_train,y_train)

pred_gbc=gbc.predict(xy_test)

gbc.score(xy_test,y_test)

print(classification_report(y_test,pred_gbc))

# now we will create predictive model
def output_lable(n):
  if n==0:
    return "It is Fake News="
  elif n==1:
    return "It is True News="

def manual_testing(news):
  testing_news={'text':[news]} # correct syntax for defining dictionary
  new_def_test=pd.DataFrame(testing_news)
  new_def_test['text']=new_def_test['text'].apply(wordopt)
  new_x_test=new_def_test['text']
  new_xv_test=vectorization.transform(new_x_test) # Assuming Vectorization is your vetorizer object
  pred_LR=LR.predict(new_xv_test)
  pred_DT=DT.predict(new_xv_test)
  pred_RFC=rfc.predict(new_xv_test)
  pred_GBC=gbc.predict(new_xv_test)
  return "\n\nLR Prediction : {} \nDT Prediction : {} \nRFC Prediction : {} \nGBC Prediction : {}".format(output_lable(pred_LR[0]),output_lable(pred_DT[0]),output_lable(pred_RFC[0]),output_lable(pred_GBC[0]))

news_article=str(input())
manual_testing(news_article)